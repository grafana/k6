// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: distributed.proto

package distributed

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DistributedTestClient is the client API for DistributedTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistributedTestClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	CommandAndControl(ctx context.Context, opts ...grpc.CallOption) (DistributedTest_CommandAndControlClient, error)
}

type distributedTestClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributedTestClient(cc grpc.ClientConnInterface) DistributedTestClient {
	return &distributedTestClient{cc}
}

func (c *distributedTestClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/distributed.DistributedTest/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedTestClient) CommandAndControl(ctx context.Context, opts ...grpc.CallOption) (DistributedTest_CommandAndControlClient, error) {
	stream, err := c.cc.NewStream(ctx, &DistributedTest_ServiceDesc.Streams[0], "/distributed.DistributedTest/CommandAndControl", opts...)
	if err != nil {
		return nil, err
	}
	x := &distributedTestCommandAndControlClient{stream}
	return x, nil
}

type DistributedTest_CommandAndControlClient interface {
	Send(*AgentMessage) error
	Recv() (*ControllerMessage, error)
	grpc.ClientStream
}

type distributedTestCommandAndControlClient struct {
	grpc.ClientStream
}

func (x *distributedTestCommandAndControlClient) Send(m *AgentMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *distributedTestCommandAndControlClient) Recv() (*ControllerMessage, error) {
	m := new(ControllerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DistributedTestServer is the server API for DistributedTest service.
// All implementations must embed UnimplementedDistributedTestServer
// for forward compatibility
type DistributedTestServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	CommandAndControl(DistributedTest_CommandAndControlServer) error
	mustEmbedUnimplementedDistributedTestServer()
}

// UnimplementedDistributedTestServer must be embedded to have forward compatible implementations.
type UnimplementedDistributedTestServer struct {
}

func (UnimplementedDistributedTestServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedDistributedTestServer) CommandAndControl(DistributedTest_CommandAndControlServer) error {
	return status.Errorf(codes.Unimplemented, "method CommandAndControl not implemented")
}
func (UnimplementedDistributedTestServer) mustEmbedUnimplementedDistributedTestServer() {}

// UnsafeDistributedTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributedTestServer will
// result in compilation errors.
type UnsafeDistributedTestServer interface {
	mustEmbedUnimplementedDistributedTestServer()
}

func RegisterDistributedTestServer(s grpc.ServiceRegistrar, srv DistributedTestServer) {
	s.RegisterService(&DistributedTest_ServiceDesc, srv)
}

func _DistributedTest_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedTestServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/distributed.DistributedTest/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedTestServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedTest_CommandAndControl_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DistributedTestServer).CommandAndControl(&distributedTestCommandAndControlServer{stream})
}

type DistributedTest_CommandAndControlServer interface {
	Send(*ControllerMessage) error
	Recv() (*AgentMessage, error)
	grpc.ServerStream
}

type distributedTestCommandAndControlServer struct {
	grpc.ServerStream
}

func (x *distributedTestCommandAndControlServer) Send(m *ControllerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *distributedTestCommandAndControlServer) Recv() (*AgentMessage, error) {
	m := new(AgentMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DistributedTest_ServiceDesc is the grpc.ServiceDesc for DistributedTest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistributedTest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "distributed.DistributedTest",
	HandlerType: (*DistributedTestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _DistributedTest_Register_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CommandAndControl",
			Handler:       _DistributedTest_CommandAndControl_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "distributed.proto",
}
