// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: v1/trace/span.proto

package trace

import (
	common "go.k6.io/k6/cloudapi/insights/proto/v1/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SpanKind is the type of span.
type SpanKind int32

const (
	// Unspecified. Do NOT use as default.
	SpanKind_SPAN_KIND_UNSPECIFIED SpanKind = 0
	// Indicates that the span represents an internal operation within an application,
	// as opposed to an operation happening at the boundaries. Default value.
	SpanKind_SPAN_KIND_INTERNAL SpanKind = 1
	// Indicates that the span covers server-side handling of an RPC or other
	// remote network request.
	SpanKind_SPAN_KIND_SERVER SpanKind = 2
	// Indicates that the span describes a request to some remote service.
	SpanKind_SPAN_KIND_CLIENT SpanKind = 3
	// Indicates that the span describes a producer sending a message to a broker.
	SpanKind_SPAN_KIND_PRODUCER SpanKind = 4
	// Indicates that the span describes consumer receiving a message from a broker.
	SpanKind_SPAN_KIND_CONSUMER SpanKind = 5
)

// Enum value maps for SpanKind.
var (
	SpanKind_name = map[int32]string{
		0: "SPAN_KIND_UNSPECIFIED",
		1: "SPAN_KIND_INTERNAL",
		2: "SPAN_KIND_SERVER",
		3: "SPAN_KIND_CLIENT",
		4: "SPAN_KIND_PRODUCER",
		5: "SPAN_KIND_CONSUMER",
	}
	SpanKind_value = map[string]int32{
		"SPAN_KIND_UNSPECIFIED": 0,
		"SPAN_KIND_INTERNAL":    1,
		"SPAN_KIND_SERVER":      2,
		"SPAN_KIND_CLIENT":      3,
		"SPAN_KIND_PRODUCER":    4,
		"SPAN_KIND_CONSUMER":    5,
	}
)

func (x SpanKind) Enum() *SpanKind {
	p := new(SpanKind)
	*p = x
	return p
}

func (x SpanKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpanKind) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_trace_span_proto_enumTypes[0].Descriptor()
}

func (SpanKind) Type() protoreflect.EnumType {
	return &file_v1_trace_span_proto_enumTypes[0]
}

func (x SpanKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpanKind.Descriptor instead.
func (SpanKind) EnumDescriptor() ([]byte, []int) {
	return file_v1_trace_span_proto_rawDescGZIP(), []int{0}
}

// For the semantics of status codes see
// https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/api.md#set-status
type SpanStatusCode int32

const (
	// The default status.
	SpanStatusCode_STATUS_CODE_UNSET SpanStatusCode = 0
	// The Span has been validated by an Application developers or Operator to have completed successfully.
	SpanStatusCode_STATUS_CODE_OK SpanStatusCode = 1
	// The Span contains an error.
	SpanStatusCode_STATUS_CODE_ERROR SpanStatusCode = 2
)

// Enum value maps for SpanStatusCode.
var (
	SpanStatusCode_name = map[int32]string{
		0: "STATUS_CODE_UNSET",
		1: "STATUS_CODE_OK",
		2: "STATUS_CODE_ERROR",
	}
	SpanStatusCode_value = map[string]int32{
		"STATUS_CODE_UNSET": 0,
		"STATUS_CODE_OK":    1,
		"STATUS_CODE_ERROR": 2,
	}
)

func (x SpanStatusCode) Enum() *SpanStatusCode {
	p := new(SpanStatusCode)
	*p = x
	return p
}

func (x SpanStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpanStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_trace_span_proto_enumTypes[1].Descriptor()
}

func (SpanStatusCode) Type() protoreflect.EnumType {
	return &file_v1_trace_span_proto_enumTypes[1]
}

func (x SpanStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpanStatusCode.Descriptor instead.
func (SpanStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_v1_trace_span_proto_rawDescGZIP(), []int{1}
}

type Span struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifier for a trace.
	TraceID string `protobuf:"bytes,1,opt,name=TraceID,proto3" json:"TraceID,omitempty"`
	// A unique identifier for a span within a trace.
	SpanID string `protobuf:"bytes,2,opt,name=SpanID,proto3" json:"SpanID,omitempty"`
	// The start time of the span.
	StartTimeUnixNano int64 `protobuf:"fixed64,3,opt,name=StartTimeUnixNano,proto3" json:"StartTimeUnixNano,omitempty"`
	// The end time of the span.
	EndTimeUnixNano int64 `protobuf:"fixed64,4,opt,name=EndTimeUnixNano,proto3" json:"EndTimeUnixNano,omitempty"`
	// A description of the span's operation.
	Name string `protobuf:"bytes,5,opt,name=Name,proto3" json:"Name,omitempty"`
	// Logical name of the service.
	ServiceName string `protobuf:"bytes,6,opt,name=ServiceName,proto3" json:"ServiceName,omitempty"`
	// Distinguishes between spans generated in a particular context.
	Kind SpanKind `protobuf:"varint,7,opt,name=Kind,proto3,enum=k6.cloud.insights.proto.v1.trace.SpanKind" json:"Kind,omitempty"`
	// The status code.
	StatusCode SpanStatusCode `protobuf:"varint,8,opt,name=StatusCode,proto3,enum=k6.cloud.insights.proto.v1.trace.SpanStatusCode" json:"StatusCode,omitempty"`
	// The attributes associated with the span.
	// https://github.com/open-telemetry/opentelemetry-specification/tree/main/specification/resource/semantic_conventions
	// https://github.com/opentracing/specification/blob/master/semantic_conventions.md#span-tags-table
	Attributes []*common.KeyValue `protobuf:"bytes,9,rep,name=Attributes,proto3" json:"Attributes,omitempty"`
}

func (x *Span) Reset() {
	*x = Span{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_trace_span_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Span) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span) ProtoMessage() {}

func (x *Span) ProtoReflect() protoreflect.Message {
	mi := &file_v1_trace_span_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span.ProtoReflect.Descriptor instead.
func (*Span) Descriptor() ([]byte, []int) {
	return file_v1_trace_span_proto_rawDescGZIP(), []int{0}
}

func (x *Span) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

func (x *Span) GetSpanID() string {
	if x != nil {
		return x.SpanID
	}
	return ""
}

func (x *Span) GetStartTimeUnixNano() int64 {
	if x != nil {
		return x.StartTimeUnixNano
	}
	return 0
}

func (x *Span) GetEndTimeUnixNano() int64 {
	if x != nil {
		return x.EndTimeUnixNano
	}
	return 0
}

func (x *Span) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Span) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *Span) GetKind() SpanKind {
	if x != nil {
		return x.Kind
	}
	return SpanKind_SPAN_KIND_UNSPECIFIED
}

func (x *Span) GetStatusCode() SpanStatusCode {
	if x != nil {
		return x.StatusCode
	}
	return SpanStatusCode_STATUS_CODE_UNSET
}

func (x *Span) GetAttributes() []*common.KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

var File_v1_trace_span_proto protoreflect.FileDescriptor

var file_v1_trace_span_proto_rawDesc = []byte{
	0x0a, 0x13, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x6b, 0x36, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x1a, 0x16, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xa5, 0x03, 0x0a, 0x04, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x10, 0x52, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x10, 0x52, 0x0f, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61,
	0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6b, 0x36, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6b,
	0x36, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e,
	0x53, 0x70, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6b, 0x36, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2a, 0x99, 0x01, 0x0a, 0x08, 0x53, 0x70, 0x61, 0x6e,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x50, 0x41, 0x4e, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x50, 0x41, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x50, 0x41, 0x4e, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x50, 0x41, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x50, 0x41, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x52, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x50, 0x41, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45,
	0x52, 0x10, 0x05, 0x2a, 0x52, 0x0a, 0x0e, 0x53, 0x70, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x4b, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x6f, 0x2e, 0x6b, 0x36,
	0x2e, 0x69, 0x6f, 0x2f, 0x6b, 0x36, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x61, 0x70, 0x69, 0x2f,
	0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_trace_span_proto_rawDescOnce sync.Once
	file_v1_trace_span_proto_rawDescData = file_v1_trace_span_proto_rawDesc
)

func file_v1_trace_span_proto_rawDescGZIP() []byte {
	file_v1_trace_span_proto_rawDescOnce.Do(func() {
		file_v1_trace_span_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_trace_span_proto_rawDescData)
	})
	return file_v1_trace_span_proto_rawDescData
}

var file_v1_trace_span_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_v1_trace_span_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_v1_trace_span_proto_goTypes = []interface{}{
	(SpanKind)(0),           // 0: k6.cloud.insights.proto.v1.trace.SpanKind
	(SpanStatusCode)(0),     // 1: k6.cloud.insights.proto.v1.trace.SpanStatusCode
	(*Span)(nil),            // 2: k6.cloud.insights.proto.v1.trace.Span
	(*common.KeyValue)(nil), // 3: k6.cloud.insights.proto.v1.common.KeyValue
}
var file_v1_trace_span_proto_depIdxs = []int32{
	0, // 0: k6.cloud.insights.proto.v1.trace.Span.Kind:type_name -> k6.cloud.insights.proto.v1.trace.SpanKind
	1, // 1: k6.cloud.insights.proto.v1.trace.Span.StatusCode:type_name -> k6.cloud.insights.proto.v1.trace.SpanStatusCode
	3, // 2: k6.cloud.insights.proto.v1.trace.Span.Attributes:type_name -> k6.cloud.insights.proto.v1.common.KeyValue
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_v1_trace_span_proto_init() }
func file_v1_trace_span_proto_init() {
	if File_v1_trace_span_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_trace_span_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Span); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_trace_span_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_trace_span_proto_goTypes,
		DependencyIndexes: file_v1_trace_span_proto_depIdxs,
		EnumInfos:         file_v1_trace_span_proto_enumTypes,
		MessageInfos:      file_v1_trace_span_proto_msgTypes,
	}.Build()
	File_v1_trace_span_proto = out.File
	file_v1_trace_span_proto_rawDesc = nil
	file_v1_trace_span_proto_goTypes = nil
	file_v1_trace_span_proto_depIdxs = nil
}
