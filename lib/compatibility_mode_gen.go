// Code generated by "enumer -type=CompatibilityMode -transform=snake -trimprefix CompatibilityMode -output compatibility_mode_gen.go"; DO NOT EDIT.

package lib

import (
	"fmt"
	"strings"
)

const _CompatibilityModeName = "extendedbaseenhanced"

var _CompatibilityModeIndex = [...]uint8{0, 8, 12, 20}

const _CompatibilityModeLowerName = "extendedbaseenhanced"

func (i CompatibilityMode) String() string {
	i -= 1
	if i >= CompatibilityMode(len(_CompatibilityModeIndex)-1) {
		return fmt.Sprintf("CompatibilityMode(%d)", i+1)
	}
	return _CompatibilityModeName[_CompatibilityModeIndex[i]:_CompatibilityModeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CompatibilityModeNoOp() {
	var x [1]struct{}
	_ = x[CompatibilityModeExtended-(1)]
	_ = x[CompatibilityModeBase-(2)]
	_ = x[CompatibilityModeEnhanced-(3)]
}

var _CompatibilityModeValues = []CompatibilityMode{CompatibilityModeExtended, CompatibilityModeBase, CompatibilityModeEnhanced}

var _CompatibilityModeNameToValueMap = map[string]CompatibilityMode{
	_CompatibilityModeName[0:8]:        CompatibilityModeExtended,
	_CompatibilityModeLowerName[0:8]:   CompatibilityModeExtended,
	_CompatibilityModeName[8:12]:       CompatibilityModeBase,
	_CompatibilityModeLowerName[8:12]:  CompatibilityModeBase,
	_CompatibilityModeName[12:20]:      CompatibilityModeEnhanced,
	_CompatibilityModeLowerName[12:20]: CompatibilityModeEnhanced,
}

var _CompatibilityModeNames = []string{
	_CompatibilityModeName[0:8],
	_CompatibilityModeName[8:12],
	_CompatibilityModeName[12:20],
}

// CompatibilityModeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CompatibilityModeString(s string) (CompatibilityMode, error) {
	if val, ok := _CompatibilityModeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CompatibilityModeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CompatibilityMode values", s)
}

// CompatibilityModeValues returns all values of the enum
func CompatibilityModeValues() []CompatibilityMode {
	return _CompatibilityModeValues
}

// CompatibilityModeStrings returns a slice of all String values of the enum
func CompatibilityModeStrings() []string {
	strs := make([]string, len(_CompatibilityModeNames))
	copy(strs, _CompatibilityModeNames)
	return strs
}

// IsACompatibilityMode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CompatibilityMode) IsACompatibilityMode() bool {
	for _, v := range _CompatibilityModeValues {
		if i == v {
			return true
		}
	}
	return false
}
