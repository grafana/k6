// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package audits

import (
	json "encoding/json"
	cdp "github.com/chromedp/cdproto/cdp"
	network "github.com/chromedp/cdproto/network"
	runtime "github.com/chromedp/cdproto/runtime"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits(in *jlexer.Lexer, out *StylesheetLoadingIssueDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sourceCodeLocation":
			if in.IsNull() {
				in.Skip()
				out.SourceCodeLocation = nil
			} else {
				if out.SourceCodeLocation == nil {
					out.SourceCodeLocation = new(SourceCodeLocation)
				}
				(*out.SourceCodeLocation).UnmarshalEasyJSON(in)
			}
		case "styleSheetLoadingIssueReason":
			(out.StyleSheetLoadingIssueReason).UnmarshalEasyJSON(in)
		case "failedRequestInfo":
			if in.IsNull() {
				in.Skip()
				out.FailedRequestInfo = nil
			} else {
				if out.FailedRequestInfo == nil {
					out.FailedRequestInfo = new(FailedRequestInfo)
				}
				(*out.FailedRequestInfo).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits(out *jwriter.Writer, in StylesheetLoadingIssueDetails) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sourceCodeLocation\":"
		out.RawString(prefix[1:])
		if in.SourceCodeLocation == nil {
			out.RawString("null")
		} else {
			(*in.SourceCodeLocation).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"styleSheetLoadingIssueReason\":"
		out.RawString(prefix)
		(in.StyleSheetLoadingIssueReason).MarshalEasyJSON(out)
	}
	if in.FailedRequestInfo != nil {
		const prefix string = ",\"failedRequestInfo\":"
		out.RawString(prefix)
		(*in.FailedRequestInfo).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StylesheetLoadingIssueDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StylesheetLoadingIssueDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StylesheetLoadingIssueDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StylesheetLoadingIssueDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits1(in *jlexer.Lexer, out *SourceCodeLocation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "scriptId":
			out.ScriptID = runtime.ScriptID(in.String())
		case "url":
			out.URL = string(in.String())
		case "lineNumber":
			out.LineNumber = int64(in.Int64())
		case "columnNumber":
			out.ColumnNumber = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits1(out *jwriter.Writer, in SourceCodeLocation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ScriptID != "" {
		const prefix string = ",\"scriptId\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ScriptID))
	}
	{
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"lineNumber\":"
		out.RawString(prefix)
		out.Int64(int64(in.LineNumber))
	}
	{
		const prefix string = ",\"columnNumber\":"
		out.RawString(prefix)
		out.Int64(int64(in.ColumnNumber))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SourceCodeLocation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SourceCodeLocation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SourceCodeLocation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SourceCodeLocation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits1(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits2(in *jlexer.Lexer, out *SharedDictionaryIssueDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sharedDictionaryError":
			(out.SharedDictionaryError).UnmarshalEasyJSON(in)
		case "request":
			if in.IsNull() {
				in.Skip()
				out.Request = nil
			} else {
				if out.Request == nil {
					out.Request = new(AffectedRequest)
				}
				(*out.Request).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits2(out *jwriter.Writer, in SharedDictionaryIssueDetails) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sharedDictionaryError\":"
		out.RawString(prefix[1:])
		(in.SharedDictionaryError).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"request\":"
		out.RawString(prefix)
		if in.Request == nil {
			out.RawString("null")
		} else {
			(*in.Request).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SharedDictionaryIssueDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SharedDictionaryIssueDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SharedDictionaryIssueDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SharedDictionaryIssueDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits2(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits3(in *jlexer.Lexer, out *SharedArrayBufferIssueDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sourceCodeLocation":
			if in.IsNull() {
				in.Skip()
				out.SourceCodeLocation = nil
			} else {
				if out.SourceCodeLocation == nil {
					out.SourceCodeLocation = new(SourceCodeLocation)
				}
				(*out.SourceCodeLocation).UnmarshalEasyJSON(in)
			}
		case "isWarning":
			out.IsWarning = bool(in.Bool())
		case "type":
			(out.Type).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits3(out *jwriter.Writer, in SharedArrayBufferIssueDetails) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sourceCodeLocation\":"
		out.RawString(prefix[1:])
		if in.SourceCodeLocation == nil {
			out.RawString("null")
		} else {
			(*in.SourceCodeLocation).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"isWarning\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsWarning))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		(in.Type).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SharedArrayBufferIssueDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SharedArrayBufferIssueDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SharedArrayBufferIssueDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SharedArrayBufferIssueDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits3(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits4(in *jlexer.Lexer, out *QuirksModeIssueDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "isLimitedQuirksMode":
			out.IsLimitedQuirksMode = bool(in.Bool())
		case "documentNodeId":
			(out.DocumentNodeID).UnmarshalEasyJSON(in)
		case "url":
			out.URL = string(in.String())
		case "frameId":
			(out.FrameID).UnmarshalEasyJSON(in)
		case "loaderId":
			out.LoaderID = cdp.LoaderID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits4(out *jwriter.Writer, in QuirksModeIssueDetails) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"isLimitedQuirksMode\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.IsLimitedQuirksMode))
	}
	{
		const prefix string = ",\"documentNodeId\":"
		out.RawString(prefix)
		out.Int64(int64(in.DocumentNodeID))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"frameId\":"
		out.RawString(prefix)
		out.String(string(in.FrameID))
	}
	{
		const prefix string = ",\"loaderId\":"
		out.RawString(prefix)
		out.String(string(in.LoaderID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuirksModeIssueDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuirksModeIssueDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuirksModeIssueDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuirksModeIssueDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits4(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits5(in *jlexer.Lexer, out *PropertyRuleIssueDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sourceCodeLocation":
			if in.IsNull() {
				in.Skip()
				out.SourceCodeLocation = nil
			} else {
				if out.SourceCodeLocation == nil {
					out.SourceCodeLocation = new(SourceCodeLocation)
				}
				(*out.SourceCodeLocation).UnmarshalEasyJSON(in)
			}
		case "propertyRuleIssueReason":
			(out.PropertyRuleIssueReason).UnmarshalEasyJSON(in)
		case "propertyValue":
			out.PropertyValue = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits5(out *jwriter.Writer, in PropertyRuleIssueDetails) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sourceCodeLocation\":"
		out.RawString(prefix[1:])
		if in.SourceCodeLocation == nil {
			out.RawString("null")
		} else {
			(*in.SourceCodeLocation).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"propertyRuleIssueReason\":"
		out.RawString(prefix)
		(in.PropertyRuleIssueReason).MarshalEasyJSON(out)
	}
	if in.PropertyValue != "" {
		const prefix string = ",\"propertyValue\":"
		out.RawString(prefix)
		out.String(string(in.PropertyValue))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PropertyRuleIssueDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PropertyRuleIssueDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PropertyRuleIssueDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PropertyRuleIssueDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits5(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits6(in *jlexer.Lexer, out *MixedContentIssueDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "resourceType":
			(out.ResourceType).UnmarshalEasyJSON(in)
		case "resolutionStatus":
			(out.ResolutionStatus).UnmarshalEasyJSON(in)
		case "insecureURL":
			out.InsecureURL = string(in.String())
		case "mainResourceURL":
			out.MainResourceURL = string(in.String())
		case "request":
			if in.IsNull() {
				in.Skip()
				out.Request = nil
			} else {
				if out.Request == nil {
					out.Request = new(AffectedRequest)
				}
				(*out.Request).UnmarshalEasyJSON(in)
			}
		case "frame":
			if in.IsNull() {
				in.Skip()
				out.Frame = nil
			} else {
				if out.Frame == nil {
					out.Frame = new(AffectedFrame)
				}
				(*out.Frame).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits6(out *jwriter.Writer, in MixedContentIssueDetails) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ResourceType != "" {
		const prefix string = ",\"resourceType\":"
		first = false
		out.RawString(prefix[1:])
		(in.ResourceType).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"resolutionStatus\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.ResolutionStatus).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"insecureURL\":"
		out.RawString(prefix)
		out.String(string(in.InsecureURL))
	}
	{
		const prefix string = ",\"mainResourceURL\":"
		out.RawString(prefix)
		out.String(string(in.MainResourceURL))
	}
	if in.Request != nil {
		const prefix string = ",\"request\":"
		out.RawString(prefix)
		(*in.Request).MarshalEasyJSON(out)
	}
	if in.Frame != nil {
		const prefix string = ",\"frame\":"
		out.RawString(prefix)
		(*in.Frame).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MixedContentIssueDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MixedContentIssueDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MixedContentIssueDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MixedContentIssueDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits6(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits7(in *jlexer.Lexer, out *LowTextContrastIssueDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "violatingNodeId":
			(out.ViolatingNodeID).UnmarshalEasyJSON(in)
		case "violatingNodeSelector":
			out.ViolatingNodeSelector = string(in.String())
		case "contrastRatio":
			out.ContrastRatio = float64(in.Float64())
		case "thresholdAA":
			out.ThresholdAA = float64(in.Float64())
		case "thresholdAAA":
			out.ThresholdAAA = float64(in.Float64())
		case "fontSize":
			out.FontSize = string(in.String())
		case "fontWeight":
			out.FontWeight = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits7(out *jwriter.Writer, in LowTextContrastIssueDetails) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"violatingNodeId\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ViolatingNodeID))
	}
	{
		const prefix string = ",\"violatingNodeSelector\":"
		out.RawString(prefix)
		out.String(string(in.ViolatingNodeSelector))
	}
	{
		const prefix string = ",\"contrastRatio\":"
		out.RawString(prefix)
		out.Float64(float64(in.ContrastRatio))
	}
	{
		const prefix string = ",\"thresholdAA\":"
		out.RawString(prefix)
		out.Float64(float64(in.ThresholdAA))
	}
	{
		const prefix string = ",\"thresholdAAA\":"
		out.RawString(prefix)
		out.Float64(float64(in.ThresholdAAA))
	}
	{
		const prefix string = ",\"fontSize\":"
		out.RawString(prefix)
		out.String(string(in.FontSize))
	}
	{
		const prefix string = ",\"fontWeight\":"
		out.RawString(prefix)
		out.String(string(in.FontWeight))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LowTextContrastIssueDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LowTextContrastIssueDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LowTextContrastIssueDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LowTextContrastIssueDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits7(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits8(in *jlexer.Lexer, out *InspectorIssueDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cookieIssueDetails":
			if in.IsNull() {
				in.Skip()
				out.CookieIssueDetails = nil
			} else {
				if out.CookieIssueDetails == nil {
					out.CookieIssueDetails = new(CookieIssueDetails)
				}
				(*out.CookieIssueDetails).UnmarshalEasyJSON(in)
			}
		case "mixedContentIssueDetails":
			if in.IsNull() {
				in.Skip()
				out.MixedContentIssueDetails = nil
			} else {
				if out.MixedContentIssueDetails == nil {
					out.MixedContentIssueDetails = new(MixedContentIssueDetails)
				}
				(*out.MixedContentIssueDetails).UnmarshalEasyJSON(in)
			}
		case "blockedByResponseIssueDetails":
			if in.IsNull() {
				in.Skip()
				out.BlockedByResponseIssueDetails = nil
			} else {
				if out.BlockedByResponseIssueDetails == nil {
					out.BlockedByResponseIssueDetails = new(BlockedByResponseIssueDetails)
				}
				(*out.BlockedByResponseIssueDetails).UnmarshalEasyJSON(in)
			}
		case "heavyAdIssueDetails":
			if in.IsNull() {
				in.Skip()
				out.HeavyAdIssueDetails = nil
			} else {
				if out.HeavyAdIssueDetails == nil {
					out.HeavyAdIssueDetails = new(HeavyAdIssueDetails)
				}
				(*out.HeavyAdIssueDetails).UnmarshalEasyJSON(in)
			}
		case "contentSecurityPolicyIssueDetails":
			if in.IsNull() {
				in.Skip()
				out.ContentSecurityPolicyIssueDetails = nil
			} else {
				if out.ContentSecurityPolicyIssueDetails == nil {
					out.ContentSecurityPolicyIssueDetails = new(ContentSecurityPolicyIssueDetails)
				}
				(*out.ContentSecurityPolicyIssueDetails).UnmarshalEasyJSON(in)
			}
		case "sharedArrayBufferIssueDetails":
			if in.IsNull() {
				in.Skip()
				out.SharedArrayBufferIssueDetails = nil
			} else {
				if out.SharedArrayBufferIssueDetails == nil {
					out.SharedArrayBufferIssueDetails = new(SharedArrayBufferIssueDetails)
				}
				(*out.SharedArrayBufferIssueDetails).UnmarshalEasyJSON(in)
			}
		case "lowTextContrastIssueDetails":
			if in.IsNull() {
				in.Skip()
				out.LowTextContrastIssueDetails = nil
			} else {
				if out.LowTextContrastIssueDetails == nil {
					out.LowTextContrastIssueDetails = new(LowTextContrastIssueDetails)
				}
				(*out.LowTextContrastIssueDetails).UnmarshalEasyJSON(in)
			}
		case "corsIssueDetails":
			if in.IsNull() {
				in.Skip()
				out.CorsIssueDetails = nil
			} else {
				if out.CorsIssueDetails == nil {
					out.CorsIssueDetails = new(CorsIssueDetails)
				}
				(*out.CorsIssueDetails).UnmarshalEasyJSON(in)
			}
		case "attributionReportingIssueDetails":
			if in.IsNull() {
				in.Skip()
				out.AttributionReportingIssueDetails = nil
			} else {
				if out.AttributionReportingIssueDetails == nil {
					out.AttributionReportingIssueDetails = new(AttributionReportingIssueDetails)
				}
				(*out.AttributionReportingIssueDetails).UnmarshalEasyJSON(in)
			}
		case "quirksModeIssueDetails":
			if in.IsNull() {
				in.Skip()
				out.QuirksModeIssueDetails = nil
			} else {
				if out.QuirksModeIssueDetails == nil {
					out.QuirksModeIssueDetails = new(QuirksModeIssueDetails)
				}
				(*out.QuirksModeIssueDetails).UnmarshalEasyJSON(in)
			}
		case "genericIssueDetails":
			if in.IsNull() {
				in.Skip()
				out.GenericIssueDetails = nil
			} else {
				if out.GenericIssueDetails == nil {
					out.GenericIssueDetails = new(GenericIssueDetails)
				}
				(*out.GenericIssueDetails).UnmarshalEasyJSON(in)
			}
		case "deprecationIssueDetails":
			if in.IsNull() {
				in.Skip()
				out.DeprecationIssueDetails = nil
			} else {
				if out.DeprecationIssueDetails == nil {
					out.DeprecationIssueDetails = new(DeprecationIssueDetails)
				}
				(*out.DeprecationIssueDetails).UnmarshalEasyJSON(in)
			}
		case "clientHintIssueDetails":
			if in.IsNull() {
				in.Skip()
				out.ClientHintIssueDetails = nil
			} else {
				if out.ClientHintIssueDetails == nil {
					out.ClientHintIssueDetails = new(ClientHintIssueDetails)
				}
				(*out.ClientHintIssueDetails).UnmarshalEasyJSON(in)
			}
		case "federatedAuthRequestIssueDetails":
			if in.IsNull() {
				in.Skip()
				out.FederatedAuthRequestIssueDetails = nil
			} else {
				if out.FederatedAuthRequestIssueDetails == nil {
					out.FederatedAuthRequestIssueDetails = new(FederatedAuthRequestIssueDetails)
				}
				(*out.FederatedAuthRequestIssueDetails).UnmarshalEasyJSON(in)
			}
		case "bounceTrackingIssueDetails":
			if in.IsNull() {
				in.Skip()
				out.BounceTrackingIssueDetails = nil
			} else {
				if out.BounceTrackingIssueDetails == nil {
					out.BounceTrackingIssueDetails = new(BounceTrackingIssueDetails)
				}
				(*out.BounceTrackingIssueDetails).UnmarshalEasyJSON(in)
			}
		case "cookieDeprecationMetadataIssueDetails":
			if in.IsNull() {
				in.Skip()
				out.CookieDeprecationMetadataIssueDetails = nil
			} else {
				if out.CookieDeprecationMetadataIssueDetails == nil {
					out.CookieDeprecationMetadataIssueDetails = new(CookieDeprecationMetadataIssueDetails)
				}
				(*out.CookieDeprecationMetadataIssueDetails).UnmarshalEasyJSON(in)
			}
		case "stylesheetLoadingIssueDetails":
			if in.IsNull() {
				in.Skip()
				out.StylesheetLoadingIssueDetails = nil
			} else {
				if out.StylesheetLoadingIssueDetails == nil {
					out.StylesheetLoadingIssueDetails = new(StylesheetLoadingIssueDetails)
				}
				(*out.StylesheetLoadingIssueDetails).UnmarshalEasyJSON(in)
			}
		case "propertyRuleIssueDetails":
			if in.IsNull() {
				in.Skip()
				out.PropertyRuleIssueDetails = nil
			} else {
				if out.PropertyRuleIssueDetails == nil {
					out.PropertyRuleIssueDetails = new(PropertyRuleIssueDetails)
				}
				(*out.PropertyRuleIssueDetails).UnmarshalEasyJSON(in)
			}
		case "federatedAuthUserInfoRequestIssueDetails":
			if in.IsNull() {
				in.Skip()
				out.FederatedAuthUserInfoRequestIssueDetails = nil
			} else {
				if out.FederatedAuthUserInfoRequestIssueDetails == nil {
					out.FederatedAuthUserInfoRequestIssueDetails = new(FederatedAuthUserInfoRequestIssueDetails)
				}
				(*out.FederatedAuthUserInfoRequestIssueDetails).UnmarshalEasyJSON(in)
			}
		case "sharedDictionaryIssueDetails":
			if in.IsNull() {
				in.Skip()
				out.SharedDictionaryIssueDetails = nil
			} else {
				if out.SharedDictionaryIssueDetails == nil {
					out.SharedDictionaryIssueDetails = new(SharedDictionaryIssueDetails)
				}
				(*out.SharedDictionaryIssueDetails).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits8(out *jwriter.Writer, in InspectorIssueDetails) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CookieIssueDetails != nil {
		const prefix string = ",\"cookieIssueDetails\":"
		first = false
		out.RawString(prefix[1:])
		(*in.CookieIssueDetails).MarshalEasyJSON(out)
	}
	if in.MixedContentIssueDetails != nil {
		const prefix string = ",\"mixedContentIssueDetails\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.MixedContentIssueDetails).MarshalEasyJSON(out)
	}
	if in.BlockedByResponseIssueDetails != nil {
		const prefix string = ",\"blockedByResponseIssueDetails\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.BlockedByResponseIssueDetails).MarshalEasyJSON(out)
	}
	if in.HeavyAdIssueDetails != nil {
		const prefix string = ",\"heavyAdIssueDetails\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.HeavyAdIssueDetails).MarshalEasyJSON(out)
	}
	if in.ContentSecurityPolicyIssueDetails != nil {
		const prefix string = ",\"contentSecurityPolicyIssueDetails\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ContentSecurityPolicyIssueDetails).MarshalEasyJSON(out)
	}
	if in.SharedArrayBufferIssueDetails != nil {
		const prefix string = ",\"sharedArrayBufferIssueDetails\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SharedArrayBufferIssueDetails).MarshalEasyJSON(out)
	}
	if in.LowTextContrastIssueDetails != nil {
		const prefix string = ",\"lowTextContrastIssueDetails\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.LowTextContrastIssueDetails).MarshalEasyJSON(out)
	}
	if in.CorsIssueDetails != nil {
		const prefix string = ",\"corsIssueDetails\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.CorsIssueDetails).MarshalEasyJSON(out)
	}
	if in.AttributionReportingIssueDetails != nil {
		const prefix string = ",\"attributionReportingIssueDetails\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.AttributionReportingIssueDetails).MarshalEasyJSON(out)
	}
	if in.QuirksModeIssueDetails != nil {
		const prefix string = ",\"quirksModeIssueDetails\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.QuirksModeIssueDetails).MarshalEasyJSON(out)
	}
	if in.GenericIssueDetails != nil {
		const prefix string = ",\"genericIssueDetails\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.GenericIssueDetails).MarshalEasyJSON(out)
	}
	if in.DeprecationIssueDetails != nil {
		const prefix string = ",\"deprecationIssueDetails\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.DeprecationIssueDetails).MarshalEasyJSON(out)
	}
	if in.ClientHintIssueDetails != nil {
		const prefix string = ",\"clientHintIssueDetails\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ClientHintIssueDetails).MarshalEasyJSON(out)
	}
	if in.FederatedAuthRequestIssueDetails != nil {
		const prefix string = ",\"federatedAuthRequestIssueDetails\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.FederatedAuthRequestIssueDetails).MarshalEasyJSON(out)
	}
	if in.BounceTrackingIssueDetails != nil {
		const prefix string = ",\"bounceTrackingIssueDetails\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.BounceTrackingIssueDetails).MarshalEasyJSON(out)
	}
	if in.CookieDeprecationMetadataIssueDetails != nil {
		const prefix string = ",\"cookieDeprecationMetadataIssueDetails\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.CookieDeprecationMetadataIssueDetails).MarshalEasyJSON(out)
	}
	if in.StylesheetLoadingIssueDetails != nil {
		const prefix string = ",\"stylesheetLoadingIssueDetails\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.StylesheetLoadingIssueDetails).MarshalEasyJSON(out)
	}
	if in.PropertyRuleIssueDetails != nil {
		const prefix string = ",\"propertyRuleIssueDetails\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.PropertyRuleIssueDetails).MarshalEasyJSON(out)
	}
	if in.FederatedAuthUserInfoRequestIssueDetails != nil {
		const prefix string = ",\"federatedAuthUserInfoRequestIssueDetails\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.FederatedAuthUserInfoRequestIssueDetails).MarshalEasyJSON(out)
	}
	if in.SharedDictionaryIssueDetails != nil {
		const prefix string = ",\"sharedDictionaryIssueDetails\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SharedDictionaryIssueDetails).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InspectorIssueDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InspectorIssueDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InspectorIssueDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InspectorIssueDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits8(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits9(in *jlexer.Lexer, out *InspectorIssue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			(out.Code).UnmarshalEasyJSON(in)
		case "details":
			if in.IsNull() {
				in.Skip()
				out.Details = nil
			} else {
				if out.Details == nil {
					out.Details = new(InspectorIssueDetails)
				}
				(*out.Details).UnmarshalEasyJSON(in)
			}
		case "issueId":
			out.IssueID = IssueID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits9(out *jwriter.Writer, in InspectorIssue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		(in.Code).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"details\":"
		out.RawString(prefix)
		if in.Details == nil {
			out.RawString("null")
		} else {
			(*in.Details).MarshalEasyJSON(out)
		}
	}
	if in.IssueID != "" {
		const prefix string = ",\"issueId\":"
		out.RawString(prefix)
		out.String(string(in.IssueID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InspectorIssue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InspectorIssue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InspectorIssue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InspectorIssue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits9(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits10(in *jlexer.Lexer, out *HeavyAdIssueDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "resolution":
			(out.Resolution).UnmarshalEasyJSON(in)
		case "reason":
			(out.Reason).UnmarshalEasyJSON(in)
		case "frame":
			if in.IsNull() {
				in.Skip()
				out.Frame = nil
			} else {
				if out.Frame == nil {
					out.Frame = new(AffectedFrame)
				}
				(*out.Frame).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits10(out *jwriter.Writer, in HeavyAdIssueDetails) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"resolution\":"
		out.RawString(prefix[1:])
		(in.Resolution).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		(in.Reason).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"frame\":"
		out.RawString(prefix)
		if in.Frame == nil {
			out.RawString("null")
		} else {
			(*in.Frame).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HeavyAdIssueDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HeavyAdIssueDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HeavyAdIssueDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HeavyAdIssueDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits10(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits11(in *jlexer.Lexer, out *GetEncodedResponseReturns) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			out.Body = string(in.String())
		case "originalSize":
			out.OriginalSize = int64(in.Int64())
		case "encodedSize":
			out.EncodedSize = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits11(out *jwriter.Writer, in GetEncodedResponseReturns) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Body != "" {
		const prefix string = ",\"body\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Body))
	}
	if in.OriginalSize != 0 {
		const prefix string = ",\"originalSize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OriginalSize))
	}
	if in.EncodedSize != 0 {
		const prefix string = ",\"encodedSize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EncodedSize))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetEncodedResponseReturns) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetEncodedResponseReturns) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetEncodedResponseReturns) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetEncodedResponseReturns) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits11(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits12(in *jlexer.Lexer, out *GetEncodedResponseParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "requestId":
			out.RequestID = network.RequestID(in.String())
		case "encoding":
			(out.Encoding).UnmarshalEasyJSON(in)
		case "quality":
			out.Quality = float64(in.Float64())
		case "sizeOnly":
			out.SizeOnly = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits12(out *jwriter.Writer, in GetEncodedResponseParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"requestId\":"
		out.RawString(prefix[1:])
		out.String(string(in.RequestID))
	}
	{
		const prefix string = ",\"encoding\":"
		out.RawString(prefix)
		(in.Encoding).MarshalEasyJSON(out)
	}
	if in.Quality != 0 {
		const prefix string = ",\"quality\":"
		out.RawString(prefix)
		out.Float64(float64(in.Quality))
	}
	if in.SizeOnly {
		const prefix string = ",\"sizeOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.SizeOnly))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetEncodedResponseParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetEncodedResponseParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetEncodedResponseParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetEncodedResponseParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits12(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits13(in *jlexer.Lexer, out *GenericIssueDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "errorType":
			(out.ErrorType).UnmarshalEasyJSON(in)
		case "frameId":
			(out.FrameID).UnmarshalEasyJSON(in)
		case "violatingNodeId":
			(out.ViolatingNodeID).UnmarshalEasyJSON(in)
		case "violatingNodeAttribute":
			out.ViolatingNodeAttribute = string(in.String())
		case "request":
			if in.IsNull() {
				in.Skip()
				out.Request = nil
			} else {
				if out.Request == nil {
					out.Request = new(AffectedRequest)
				}
				(*out.Request).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits13(out *jwriter.Writer, in GenericIssueDetails) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"errorType\":"
		out.RawString(prefix[1:])
		(in.ErrorType).MarshalEasyJSON(out)
	}
	if in.FrameID != "" {
		const prefix string = ",\"frameId\":"
		out.RawString(prefix)
		out.String(string(in.FrameID))
	}
	if in.ViolatingNodeID != 0 {
		const prefix string = ",\"violatingNodeId\":"
		out.RawString(prefix)
		out.Int64(int64(in.ViolatingNodeID))
	}
	if in.ViolatingNodeAttribute != "" {
		const prefix string = ",\"violatingNodeAttribute\":"
		out.RawString(prefix)
		out.String(string(in.ViolatingNodeAttribute))
	}
	if in.Request != nil {
		const prefix string = ",\"request\":"
		out.RawString(prefix)
		(*in.Request).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GenericIssueDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GenericIssueDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GenericIssueDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GenericIssueDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits13(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits14(in *jlexer.Lexer, out *FederatedAuthUserInfoRequestIssueDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "federatedAuthUserInfoRequestIssueReason":
			(out.FederatedAuthUserInfoRequestIssueReason).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits14(out *jwriter.Writer, in FederatedAuthUserInfoRequestIssueDetails) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"federatedAuthUserInfoRequestIssueReason\":"
		out.RawString(prefix[1:])
		(in.FederatedAuthUserInfoRequestIssueReason).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FederatedAuthUserInfoRequestIssueDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FederatedAuthUserInfoRequestIssueDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FederatedAuthUserInfoRequestIssueDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FederatedAuthUserInfoRequestIssueDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits14(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits15(in *jlexer.Lexer, out *FederatedAuthRequestIssueDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "federatedAuthRequestIssueReason":
			(out.FederatedAuthRequestIssueReason).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits15(out *jwriter.Writer, in FederatedAuthRequestIssueDetails) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"federatedAuthRequestIssueReason\":"
		out.RawString(prefix[1:])
		(in.FederatedAuthRequestIssueReason).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FederatedAuthRequestIssueDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FederatedAuthRequestIssueDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FederatedAuthRequestIssueDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FederatedAuthRequestIssueDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits15(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits16(in *jlexer.Lexer, out *FailedRequestInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "failureMessage":
			out.FailureMessage = string(in.String())
		case "requestId":
			out.RequestID = network.RequestID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits16(out *jwriter.Writer, in FailedRequestInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"failureMessage\":"
		out.RawString(prefix)
		out.String(string(in.FailureMessage))
	}
	if in.RequestID != "" {
		const prefix string = ",\"requestId\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FailedRequestInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FailedRequestInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FailedRequestInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FailedRequestInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits16(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits17(in *jlexer.Lexer, out *EventIssueAdded) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "issue":
			if in.IsNull() {
				in.Skip()
				out.Issue = nil
			} else {
				if out.Issue == nil {
					out.Issue = new(InspectorIssue)
				}
				(*out.Issue).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits17(out *jwriter.Writer, in EventIssueAdded) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"issue\":"
		out.RawString(prefix[1:])
		if in.Issue == nil {
			out.RawString("null")
		} else {
			(*in.Issue).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventIssueAdded) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventIssueAdded) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventIssueAdded) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventIssueAdded) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits17(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits18(in *jlexer.Lexer, out *EnableParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits18(out *jwriter.Writer, in EnableParams) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EnableParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EnableParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EnableParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EnableParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits18(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits19(in *jlexer.Lexer, out *DisableParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits19(out *jwriter.Writer, in DisableParams) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DisableParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DisableParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DisableParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DisableParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits19(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits20(in *jlexer.Lexer, out *DeprecationIssueDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "affectedFrame":
			if in.IsNull() {
				in.Skip()
				out.AffectedFrame = nil
			} else {
				if out.AffectedFrame == nil {
					out.AffectedFrame = new(AffectedFrame)
				}
				(*out.AffectedFrame).UnmarshalEasyJSON(in)
			}
		case "sourceCodeLocation":
			if in.IsNull() {
				in.Skip()
				out.SourceCodeLocation = nil
			} else {
				if out.SourceCodeLocation == nil {
					out.SourceCodeLocation = new(SourceCodeLocation)
				}
				(*out.SourceCodeLocation).UnmarshalEasyJSON(in)
			}
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits20(out *jwriter.Writer, in DeprecationIssueDetails) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AffectedFrame != nil {
		const prefix string = ",\"affectedFrame\":"
		first = false
		out.RawString(prefix[1:])
		(*in.AffectedFrame).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"sourceCodeLocation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.SourceCodeLocation == nil {
			out.RawString("null")
		} else {
			(*in.SourceCodeLocation).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeprecationIssueDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeprecationIssueDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeprecationIssueDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeprecationIssueDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits20(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits21(in *jlexer.Lexer, out *CorsIssueDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "corsErrorStatus":
			if in.IsNull() {
				in.Skip()
				out.CorsErrorStatus = nil
			} else {
				if out.CorsErrorStatus == nil {
					out.CorsErrorStatus = new(network.CorsErrorStatus)
				}
				(*out.CorsErrorStatus).UnmarshalEasyJSON(in)
			}
		case "isWarning":
			out.IsWarning = bool(in.Bool())
		case "request":
			if in.IsNull() {
				in.Skip()
				out.Request = nil
			} else {
				if out.Request == nil {
					out.Request = new(AffectedRequest)
				}
				(*out.Request).UnmarshalEasyJSON(in)
			}
		case "location":
			if in.IsNull() {
				in.Skip()
				out.Location = nil
			} else {
				if out.Location == nil {
					out.Location = new(SourceCodeLocation)
				}
				(*out.Location).UnmarshalEasyJSON(in)
			}
		case "initiatorOrigin":
			out.InitiatorOrigin = string(in.String())
		case "resourceIPAddressSpace":
			(out.ResourceIPAddressSpace).UnmarshalEasyJSON(in)
		case "clientSecurityState":
			if in.IsNull() {
				in.Skip()
				out.ClientSecurityState = nil
			} else {
				if out.ClientSecurityState == nil {
					out.ClientSecurityState = new(network.ClientSecurityState)
				}
				(*out.ClientSecurityState).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits21(out *jwriter.Writer, in CorsIssueDetails) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"corsErrorStatus\":"
		out.RawString(prefix[1:])
		if in.CorsErrorStatus == nil {
			out.RawString("null")
		} else {
			(*in.CorsErrorStatus).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"isWarning\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsWarning))
	}
	{
		const prefix string = ",\"request\":"
		out.RawString(prefix)
		if in.Request == nil {
			out.RawString("null")
		} else {
			(*in.Request).MarshalEasyJSON(out)
		}
	}
	if in.Location != nil {
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		(*in.Location).MarshalEasyJSON(out)
	}
	if in.InitiatorOrigin != "" {
		const prefix string = ",\"initiatorOrigin\":"
		out.RawString(prefix)
		out.String(string(in.InitiatorOrigin))
	}
	if in.ResourceIPAddressSpace != "" {
		const prefix string = ",\"resourceIPAddressSpace\":"
		out.RawString(prefix)
		(in.ResourceIPAddressSpace).MarshalEasyJSON(out)
	}
	if in.ClientSecurityState != nil {
		const prefix string = ",\"clientSecurityState\":"
		out.RawString(prefix)
		(*in.ClientSecurityState).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CorsIssueDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CorsIssueDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CorsIssueDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CorsIssueDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits21(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits22(in *jlexer.Lexer, out *CookieIssueDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cookie":
			if in.IsNull() {
				in.Skip()
				out.Cookie = nil
			} else {
				if out.Cookie == nil {
					out.Cookie = new(AffectedCookie)
				}
				(*out.Cookie).UnmarshalEasyJSON(in)
			}
		case "rawCookieLine":
			out.RawCookieLine = string(in.String())
		case "cookieWarningReasons":
			if in.IsNull() {
				in.Skip()
				out.CookieWarningReasons = nil
			} else {
				in.Delim('[')
				if out.CookieWarningReasons == nil {
					if !in.IsDelim(']') {
						out.CookieWarningReasons = make([]CookieWarningReason, 0, 4)
					} else {
						out.CookieWarningReasons = []CookieWarningReason{}
					}
				} else {
					out.CookieWarningReasons = (out.CookieWarningReasons)[:0]
				}
				for !in.IsDelim(']') {
					var v1 CookieWarningReason
					(v1).UnmarshalEasyJSON(in)
					out.CookieWarningReasons = append(out.CookieWarningReasons, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cookieExclusionReasons":
			if in.IsNull() {
				in.Skip()
				out.CookieExclusionReasons = nil
			} else {
				in.Delim('[')
				if out.CookieExclusionReasons == nil {
					if !in.IsDelim(']') {
						out.CookieExclusionReasons = make([]CookieExclusionReason, 0, 4)
					} else {
						out.CookieExclusionReasons = []CookieExclusionReason{}
					}
				} else {
					out.CookieExclusionReasons = (out.CookieExclusionReasons)[:0]
				}
				for !in.IsDelim(']') {
					var v2 CookieExclusionReason
					(v2).UnmarshalEasyJSON(in)
					out.CookieExclusionReasons = append(out.CookieExclusionReasons, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "operation":
			(out.Operation).UnmarshalEasyJSON(in)
		case "siteForCookies":
			out.SiteForCookies = string(in.String())
		case "cookieUrl":
			out.CookieURL = string(in.String())
		case "request":
			if in.IsNull() {
				in.Skip()
				out.Request = nil
			} else {
				if out.Request == nil {
					out.Request = new(AffectedRequest)
				}
				(*out.Request).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits22(out *jwriter.Writer, in CookieIssueDetails) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Cookie != nil {
		const prefix string = ",\"cookie\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Cookie).MarshalEasyJSON(out)
	}
	if in.RawCookieLine != "" {
		const prefix string = ",\"rawCookieLine\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RawCookieLine))
	}
	{
		const prefix string = ",\"cookieWarningReasons\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.CookieWarningReasons == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.CookieWarningReasons {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"cookieExclusionReasons\":"
		out.RawString(prefix)
		if in.CookieExclusionReasons == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.CookieExclusionReasons {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"operation\":"
		out.RawString(prefix)
		(in.Operation).MarshalEasyJSON(out)
	}
	if in.SiteForCookies != "" {
		const prefix string = ",\"siteForCookies\":"
		out.RawString(prefix)
		out.String(string(in.SiteForCookies))
	}
	if in.CookieURL != "" {
		const prefix string = ",\"cookieUrl\":"
		out.RawString(prefix)
		out.String(string(in.CookieURL))
	}
	if in.Request != nil {
		const prefix string = ",\"request\":"
		out.RawString(prefix)
		(*in.Request).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CookieIssueDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CookieIssueDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CookieIssueDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CookieIssueDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits22(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits23(in *jlexer.Lexer, out *CookieDeprecationMetadataIssueDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "allowedSites":
			if in.IsNull() {
				in.Skip()
				out.AllowedSites = nil
			} else {
				in.Delim('[')
				if out.AllowedSites == nil {
					if !in.IsDelim(']') {
						out.AllowedSites = make([]string, 0, 4)
					} else {
						out.AllowedSites = []string{}
					}
				} else {
					out.AllowedSites = (out.AllowedSites)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.AllowedSites = append(out.AllowedSites, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "optOutPercentage":
			out.OptOutPercentage = float64(in.Float64())
		case "isOptOutTopLevel":
			out.IsOptOutTopLevel = bool(in.Bool())
		case "operation":
			(out.Operation).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits23(out *jwriter.Writer, in CookieDeprecationMetadataIssueDetails) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"allowedSites\":"
		out.RawString(prefix[1:])
		if in.AllowedSites == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.AllowedSites {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"optOutPercentage\":"
		out.RawString(prefix)
		out.Float64(float64(in.OptOutPercentage))
	}
	{
		const prefix string = ",\"isOptOutTopLevel\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsOptOutTopLevel))
	}
	{
		const prefix string = ",\"operation\":"
		out.RawString(prefix)
		(in.Operation).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CookieDeprecationMetadataIssueDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CookieDeprecationMetadataIssueDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CookieDeprecationMetadataIssueDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CookieDeprecationMetadataIssueDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits23(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits24(in *jlexer.Lexer, out *ContentSecurityPolicyIssueDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "blockedURL":
			out.BlockedURL = string(in.String())
		case "violatedDirective":
			out.ViolatedDirective = string(in.String())
		case "isReportOnly":
			out.IsReportOnly = bool(in.Bool())
		case "contentSecurityPolicyViolationType":
			(out.ContentSecurityPolicyViolationType).UnmarshalEasyJSON(in)
		case "frameAncestor":
			if in.IsNull() {
				in.Skip()
				out.FrameAncestor = nil
			} else {
				if out.FrameAncestor == nil {
					out.FrameAncestor = new(AffectedFrame)
				}
				(*out.FrameAncestor).UnmarshalEasyJSON(in)
			}
		case "sourceCodeLocation":
			if in.IsNull() {
				in.Skip()
				out.SourceCodeLocation = nil
			} else {
				if out.SourceCodeLocation == nil {
					out.SourceCodeLocation = new(SourceCodeLocation)
				}
				(*out.SourceCodeLocation).UnmarshalEasyJSON(in)
			}
		case "violatingNodeId":
			(out.ViolatingNodeID).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits24(out *jwriter.Writer, in ContentSecurityPolicyIssueDetails) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BlockedURL != "" {
		const prefix string = ",\"blockedURL\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.BlockedURL))
	}
	{
		const prefix string = ",\"violatedDirective\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ViolatedDirective))
	}
	{
		const prefix string = ",\"isReportOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsReportOnly))
	}
	{
		const prefix string = ",\"contentSecurityPolicyViolationType\":"
		out.RawString(prefix)
		(in.ContentSecurityPolicyViolationType).MarshalEasyJSON(out)
	}
	if in.FrameAncestor != nil {
		const prefix string = ",\"frameAncestor\":"
		out.RawString(prefix)
		(*in.FrameAncestor).MarshalEasyJSON(out)
	}
	if in.SourceCodeLocation != nil {
		const prefix string = ",\"sourceCodeLocation\":"
		out.RawString(prefix)
		(*in.SourceCodeLocation).MarshalEasyJSON(out)
	}
	if in.ViolatingNodeID != 0 {
		const prefix string = ",\"violatingNodeId\":"
		out.RawString(prefix)
		out.Int64(int64(in.ViolatingNodeID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContentSecurityPolicyIssueDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContentSecurityPolicyIssueDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContentSecurityPolicyIssueDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContentSecurityPolicyIssueDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits24(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits25(in *jlexer.Lexer, out *ClientHintIssueDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sourceCodeLocation":
			if in.IsNull() {
				in.Skip()
				out.SourceCodeLocation = nil
			} else {
				if out.SourceCodeLocation == nil {
					out.SourceCodeLocation = new(SourceCodeLocation)
				}
				(*out.SourceCodeLocation).UnmarshalEasyJSON(in)
			}
		case "clientHintIssueReason":
			(out.ClientHintIssueReason).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits25(out *jwriter.Writer, in ClientHintIssueDetails) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sourceCodeLocation\":"
		out.RawString(prefix[1:])
		if in.SourceCodeLocation == nil {
			out.RawString("null")
		} else {
			(*in.SourceCodeLocation).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"clientHintIssueReason\":"
		out.RawString(prefix)
		(in.ClientHintIssueReason).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClientHintIssueDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClientHintIssueDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClientHintIssueDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClientHintIssueDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits25(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits26(in *jlexer.Lexer, out *CheckFormsIssuesReturns) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "formIssues":
			if in.IsNull() {
				in.Skip()
				out.FormIssues = nil
			} else {
				in.Delim('[')
				if out.FormIssues == nil {
					if !in.IsDelim(']') {
						out.FormIssues = make([]*GenericIssueDetails, 0, 8)
					} else {
						out.FormIssues = []*GenericIssueDetails{}
					}
				} else {
					out.FormIssues = (out.FormIssues)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *GenericIssueDetails
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(GenericIssueDetails)
						}
						(*v10).UnmarshalEasyJSON(in)
					}
					out.FormIssues = append(out.FormIssues, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits26(out *jwriter.Writer, in CheckFormsIssuesReturns) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.FormIssues) != 0 {
		const prefix string = ",\"formIssues\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v11, v12 := range in.FormIssues {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					(*v12).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CheckFormsIssuesReturns) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CheckFormsIssuesReturns) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CheckFormsIssuesReturns) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CheckFormsIssuesReturns) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits26(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits27(in *jlexer.Lexer, out *CheckFormsIssuesParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits27(out *jwriter.Writer, in CheckFormsIssuesParams) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CheckFormsIssuesParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CheckFormsIssuesParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CheckFormsIssuesParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CheckFormsIssuesParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits27(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits28(in *jlexer.Lexer, out *CheckContrastParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reportAAA":
			out.ReportAAA = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits28(out *jwriter.Writer, in CheckContrastParams) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ReportAAA {
		const prefix string = ",\"reportAAA\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.ReportAAA))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CheckContrastParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CheckContrastParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CheckContrastParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CheckContrastParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits28(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits29(in *jlexer.Lexer, out *BounceTrackingIssueDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "trackingSites":
			if in.IsNull() {
				in.Skip()
				out.TrackingSites = nil
			} else {
				in.Delim('[')
				if out.TrackingSites == nil {
					if !in.IsDelim(']') {
						out.TrackingSites = make([]string, 0, 4)
					} else {
						out.TrackingSites = []string{}
					}
				} else {
					out.TrackingSites = (out.TrackingSites)[:0]
				}
				for !in.IsDelim(']') {
					var v13 string
					v13 = string(in.String())
					out.TrackingSites = append(out.TrackingSites, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits29(out *jwriter.Writer, in BounceTrackingIssueDetails) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"trackingSites\":"
		out.RawString(prefix[1:])
		if in.TrackingSites == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.TrackingSites {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BounceTrackingIssueDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BounceTrackingIssueDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BounceTrackingIssueDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BounceTrackingIssueDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits29(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits30(in *jlexer.Lexer, out *BlockedByResponseIssueDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "request":
			if in.IsNull() {
				in.Skip()
				out.Request = nil
			} else {
				if out.Request == nil {
					out.Request = new(AffectedRequest)
				}
				(*out.Request).UnmarshalEasyJSON(in)
			}
		case "parentFrame":
			if in.IsNull() {
				in.Skip()
				out.ParentFrame = nil
			} else {
				if out.ParentFrame == nil {
					out.ParentFrame = new(AffectedFrame)
				}
				(*out.ParentFrame).UnmarshalEasyJSON(in)
			}
		case "blockedFrame":
			if in.IsNull() {
				in.Skip()
				out.BlockedFrame = nil
			} else {
				if out.BlockedFrame == nil {
					out.BlockedFrame = new(AffectedFrame)
				}
				(*out.BlockedFrame).UnmarshalEasyJSON(in)
			}
		case "reason":
			(out.Reason).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits30(out *jwriter.Writer, in BlockedByResponseIssueDetails) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"request\":"
		out.RawString(prefix[1:])
		if in.Request == nil {
			out.RawString("null")
		} else {
			(*in.Request).MarshalEasyJSON(out)
		}
	}
	if in.ParentFrame != nil {
		const prefix string = ",\"parentFrame\":"
		out.RawString(prefix)
		(*in.ParentFrame).MarshalEasyJSON(out)
	}
	if in.BlockedFrame != nil {
		const prefix string = ",\"blockedFrame\":"
		out.RawString(prefix)
		(*in.BlockedFrame).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		(in.Reason).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BlockedByResponseIssueDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BlockedByResponseIssueDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BlockedByResponseIssueDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BlockedByResponseIssueDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits30(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits31(in *jlexer.Lexer, out *AttributionReportingIssueDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "violationType":
			(out.ViolationType).UnmarshalEasyJSON(in)
		case "request":
			if in.IsNull() {
				in.Skip()
				out.Request = nil
			} else {
				if out.Request == nil {
					out.Request = new(AffectedRequest)
				}
				(*out.Request).UnmarshalEasyJSON(in)
			}
		case "violatingNodeId":
			(out.ViolatingNodeID).UnmarshalEasyJSON(in)
		case "invalidParameter":
			out.InvalidParameter = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits31(out *jwriter.Writer, in AttributionReportingIssueDetails) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"violationType\":"
		out.RawString(prefix[1:])
		(in.ViolationType).MarshalEasyJSON(out)
	}
	if in.Request != nil {
		const prefix string = ",\"request\":"
		out.RawString(prefix)
		(*in.Request).MarshalEasyJSON(out)
	}
	if in.ViolatingNodeID != 0 {
		const prefix string = ",\"violatingNodeId\":"
		out.RawString(prefix)
		out.Int64(int64(in.ViolatingNodeID))
	}
	if in.InvalidParameter != "" {
		const prefix string = ",\"invalidParameter\":"
		out.RawString(prefix)
		out.String(string(in.InvalidParameter))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AttributionReportingIssueDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AttributionReportingIssueDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AttributionReportingIssueDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AttributionReportingIssueDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits31(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits32(in *jlexer.Lexer, out *AffectedRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "requestId":
			out.RequestID = network.RequestID(in.String())
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits32(out *jwriter.Writer, in AffectedRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"requestId\":"
		out.RawString(prefix[1:])
		out.String(string(in.RequestID))
	}
	if in.URL != "" {
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AffectedRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AffectedRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AffectedRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AffectedRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits32(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits33(in *jlexer.Lexer, out *AffectedFrame) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "frameId":
			(out.FrameID).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits33(out *jwriter.Writer, in AffectedFrame) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"frameId\":"
		out.RawString(prefix[1:])
		out.String(string(in.FrameID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AffectedFrame) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AffectedFrame) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AffectedFrame) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AffectedFrame) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits33(l, v)
}
func easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits34(in *jlexer.Lexer, out *AffectedCookie) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "domain":
			out.Domain = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits34(out *jwriter.Writer, in AffectedCookie) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"domain\":"
		out.RawString(prefix)
		out.String(string(in.Domain))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AffectedCookie) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AffectedCookie) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComChromedpCdprotoAudits34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AffectedCookie) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AffectedCookie) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComChromedpCdprotoAudits34(l, v)
}
