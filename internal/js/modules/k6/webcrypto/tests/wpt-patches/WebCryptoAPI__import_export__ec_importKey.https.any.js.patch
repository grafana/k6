diff --git a/WebCryptoAPI/import_export/ec_importKey.https.any.js b/WebCryptoAPI/import_export/ec_importKey.https.any.js
index a01bfbb0e..4b7ac8cf0 100644
--- a/WebCryptoAPI/import_export/ec_importKey.https.any.js
+++ b/WebCryptoAPI/import_export/ec_importKey.https.any.js
@@ -72,7 +72,8 @@
 
                 // Test public keys first
                 allValidUsages(vector.publicUsages, true).forEach(function(usages) {
-                    ['spki', 'spki_compressed', 'jwk', 'raw', 'raw_compressed'].forEach(function(format) {
+                    // TODO: k6's webcrypto doesn't support compressed points yet
+                    ['spki', 'jwk', 'raw'].forEach(function(format) {
                         var algorithm = {name: vector.name, namedCurve: curve};
                         var data = keyData[curve];
                         if (format === "jwk") { // Not all fields used for public keys
@@ -115,7 +116,8 @@
         promise_test(function(test) {
             return subtle.importKey(format, keyData, algorithm, extractable, usages).
             then(function(key) {
-                assert_equals(key.constructor, CryptoKey, "Imported a CryptoKey object");
+                // this is not yet supported in k6's webcrypto
+                // assert_equals(key.constructor, CryptoKey, "Imported a CryptoKey object");
                 assert_goodCryptoKey(key, algorithm, extractable, usages, (format === 'pkcs8' || (format === 'jwk' && keyData.d)) ? 'private' : 'public');
                 if (!extractable) {
                     return;
@@ -163,7 +165,8 @@
         promise_test(function(test) {
             return subtle.importKey(format, keyData, algorithm, extractable, usages).
             then(function(key) {
-                assert_equals(key.constructor, CryptoKey, "Imported a CryptoKey object");
+                // this is not yet supported in k6's webcrypto
+                // assert_equals(key.constructor, CryptoKey, "Imported a CryptoKey object");
                 assert_goodCryptoKey(key, algorithm, extractable, usages, keyData.d ? 'private' : 'public');
             }, function(err) {
                 assert_unreached("Threw an unexpected error: " + err.toString());
