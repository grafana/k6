name: Build
on:
  workflow_dispatch:
    inputs:
      k6_version:
        description: 'The version of the release, it must use the semantic versioning format with the v prefix. It is a development release so it is suggested to append a build metadata (e.g. v0.38.0-dev).'
        required: true
      go_version:
        description: 'Go version for building binaries'
        default: '1.x'
        required: true
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:

defaults:
  run:
    shell: bash

env:
  APP_NAME: "k6"
  # We'll push to two DockerHub repos at once; `loadimpact/k6` repo is required for backwards compatibility
  LI_DOCKER_IMAGE_ID: "andrewslotin/lik6"
  DOCKER_IMAGE_ID: "andrewslotin/k6"
  GHCR_IMAGE_ID: ${{ github.repository }}
  DEFAULT_GO_VERSION: "1.20.x"

jobs:
  configure:
    runs-on: ubuntu-latest
    outputs:
      k6_version: ${{ steps.get_k6_version.outputs.k6_version }}
      go_version: ${{ steps.get_go_version.outputs.go_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get the k6 version
        id: get_k6_version
        run: |
          set -x # Show exactly what commands are executed
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] && [[ "${{ github.event.inputs.k6_version }}" != "" ]]; then
            VERSION="${{ github.event.inputs.k6_version }}"
            echo "Building custom dev build with version '${VERSION}' from manual workflow_dispatch..."
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/v.+$ ]]; then
            VERSION="${GITHUB_REF##*/}"
            echo "Building real version tag '${GITHUB_REF}', parsed '${VERSION}' as the actual version..."
          else
            VERSION="$(git describe --tags --always --long --dirty)"
            echo "Building a non-version ref '${GITHUB_REF}', use '${VERSION}' as the version instead..."
          fi
          echo "VERSION=${VERSION}"
          echo "k6_version=${VERSION}" >> $GITHUB_OUTPUT
      - name: Get the used Go version
        id: get_go_version
        run: |
          set -x # Show exactly what commands are executed
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] && [[ "${{ github.event.inputs.go_version }}" != "" ]]; then
            GO_VERSION="${{ github.event.inputs.go_version }}"
            echo "Using custom Go version '${GO_VERSION}' from manual workflow_dispatch..."
          else
            GO_VERSION="${DEFAULT_GO_VERSION}"
            echo "Using the default Go version '${GO_VERSION}'..."
          fi
          echo "GO_VERSION=${GO_VERSION}"
          echo "go_version=${GO_VERSION}" >> $GITHUB_OUTPUT

  build-docker:
    runs-on: ubuntu-latest
    needs: [configure]
    env:
      VERSION: ${{ needs.configure.outputs.k6_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Build
        run: |
          docker buildx create \
            --name multibuilder \
            --platform linux/amd64,linux/arm64 \
            --bootstrap --use
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --target release \
            -t $DOCKER_IMAGE_ID .
      - name: Check
        run: |
            docker run $DOCKER_IMAGE_ID version
            docker run $DOCKER_IMAGE_ID --help
            docker run $DOCKER_IMAGE_ID help
            docker run $DOCKER_IMAGE_ID run --help
            docker run $DOCKER_IMAGE_ID inspect --help
            docker run $DOCKER_IMAGE_ID status --help
            docker run $DOCKER_IMAGE_ID stats --help
            docker run $DOCKER_IMAGE_ID scale --help
            docker run $DOCKER_IMAGE_ID pause --help
            docker run $DOCKER_IMAGE_ID resume --help

      - name: Log into ghcr.io
        if: ${{ github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v') }}
        run: |
          # Log into GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Publish k6:master image to ghcr.io
        if: ${{ github.ref == 'refs/heads/master' }}
        run: |
          echo "Publish as ghcr.io/$GHCR_IMAGE_ID:$VERSION"
          docker tag "$DOCKER_IMAGE_ID" "ghcr.io/$GHCR_IMAGE_ID:master"
          docker push "ghcr.io/$GHCR_IMAGE_ID:master"
      - name: Publish tagged version image to ghcr.io
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: |
          VERSION="${VERSION#v}"
          echo "Publish as ghcr.io/$GHCR_IMAGE_ID:$VERSION"
          docker tag "$DOCKER_IMAGE_ID" "ghcr.io/$GHCR_IMAGE_ID:$VERSION"
          docker push "ghcr.io/$GHCR_IMAGE_ID:$VERSION"
          # We also want to tag the latest stable version as latest
          if [[ ! "$VERSION" =~ (RC|rc) ]]; then
            echo "Publish as ghcr.io/$GHCR_IMAGE_ID:latest"
            docker tag "$DOCKER_IMAGE_ID" "ghcr.io/$GHCR_IMAGE_ID:latest"
            docker push "ghcr.io/$GHCR_IMAGE_ID:latest"
          fi

      - name: Log into Docker Hub
        if: ${{ github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v') }}
        run: |
          # Log into Docker Hub Registry
          echo "${{ secrets.DOCKER_PASS }}" | docker login -u "${{ secrets.DOCKER_USER }}" --password-stdin
      - name: Publish k6:master image to Docker Hub
        if: ${{ github.ref == 'refs/heads/master' }}
        run: |
          echo "Publish to Docker Hub as $DOCKER_IMAGE_ID:master"
          docker tag "$DOCKER_IMAGE_ID" "$DOCKER_IMAGE_ID:master"
          docker push "$DOCKER_IMAGE_ID:master"
      - name: Publish tagged version image to Docker Hub
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: |
          VERSION="${VERSION#v}"
          echo "Publish to Docker Hub as $DOCKER_IMAGE_ID:$VERSION"
          docker tag "$DOCKER_IMAGE_ID" "$DOCKER_IMAGE_ID:$VERSION"
          docker push "$DOCKER_IMAGE_ID:$VERSION"
          # We also want to tag the latest stable version as latest
          if [[ ! "$VERSION" =~ (RC|rc) ]]; then
            echo "Publish to Docker Hub as $DOCKER_IMAGE_ID:latest"
            docker tag "$DOCKER_IMAGE_ID" "$DOCKER_IMAGE_ID:latest"
            docker push "$DOCKER_IMAGE_ID:latest"
          fi
      - name: Build loadimpact/k6
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            -t $LI_DOCKER_IMAGE_ID .
      - name: Publish loadimpact/k6 image to Docker Hub
        if: ${{ github.ref == 'refs/heads/master' }}
        run: |
          echo "Publish to Docker Hub as $LI_DOCKER_IMAGE_ID:master"
          docker tag "$LI_DOCKER_IMAGE_ID" "$LI_DOCKER_IMAGE_ID:master"
          docker push "$LI_DOCKER_IMAGE_ID:master"
      - name: Publish loadimpact/k6 tagged version image to Docker Hub
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: |
          VERSION="${VERSION#v}"
          echo "Publish to Docker Hub as $LI_DOCKER_IMAGE_ID:$VERSION"
          docker tag "$LI_DOCKER_IMAGE_ID" "$LI_DOCKER_IMAGE_ID:$VERSION"
          docker push "$LI_DOCKER_IMAGE_ID:$VERSION"
          # We also want to tag the latest stable version as latest
          if [[ ! "$VERSION" =~ (RC|rc) ]]; then
            echo "Publish to Docker Hub as $LI_DOCKER_IMAGE_ID:latest"
            docker tag "$LI_DOCKER_IMAGE_ID" "$LI_DOCKER_IMAGE_ID:latest"
            docker push "$LI_DOCKER_IMAGE_ID:latest"
          fi
